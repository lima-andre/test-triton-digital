

Below you can see one example of my codes.

You can see the good java code in this project :

https://github.com/caelum/vraptor4/tree/master/vraptor-core  




package com.porto.sinistro.orcamentomultiempresa.util;

import java.math.BigDecimal;
import java.text.DateFormat;
import java.text.Normalizer;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.Collection;
import java.util.Date;
import java.util.List;

import javax.faces.context.FacesContext;
import javax.servlet.http.HttpServletResponse;
import javax.servlet.http.HttpSession;

import org.apache.commons.lang.StringUtils;
import org.apache.log4j.LogManager;
import org.apache.log4j.Logger;

import com.porto.security.multiempresa.util.SessaoUtil;
import com.porto.sinistro.orcamentomultiempresa.bean.constants.AppConstants;
import com.porto.sinistro.orcamentomultiempresa.ejb.entity.OrcamentoVersao;
import com.porto.sinistro.orcamentomultiempresa.ejb.entity.SinistroVistoria;
import com.porto.sinistro.orcamentomultiempresa.presentation.util.FacesContextUtils;

/**
 * Classe com métodos utilitários e genéricos.
 */
public class Utils {

	/** Definicao de log */
	private static final Logger LOGGER = LogManager.getLogger(Utils.class);

	/**
	 * Método responsável por converter uma string em Data+Hora.
	 * 
	 * @author André Lima
	 * @since 13/12/2012 09:00:26
	 * @param dateAsString
	 *            - Data no formato dd/MM/yyyy HH:mm:ss
	 * @return - Data
	 */
	public static Date getDateTime(final String dateAsString) {
		Date date = null;
		try {
			final DateFormat dateFormat = new SimpleDateFormat("dd/MM/yyyy HH:mm:ss");
			date = dateFormat.parse(dateAsString);
		} catch (final ParseException e) {
			LOGGER.error("Erro ao converter texto em data e hora.", e);
		}
		return date;
	}

	/**
	 * Método responsável por converter uma string em Data.
	 * 
	 * @author André Lima
	 * @since 13/12/2012 09:00:26
	 * @param dateAsString
	 *            - Data no formato dd/MM/yyyy
	 * @return - Data
	 */
	public static Date getDate(final String dateAsString) {
		Date date = null;
		try {
			final DateFormat dateFormat = new SimpleDateFormat("dd/MM/yyyy");
			date = dateFormat.parse(dateAsString);
		} catch (final ParseException e) {
			LOGGER.error("Erro ao converter texto em data.", e);
		}
		return date;
	}

	/**
	 * Método responsável por converter uma string em Hora.
	 * 
	 * @author André Lima
	 * @since 13/12/2012 09:00:26
	 * @param dateAsString
	 *            - Data no formato dd/MM/yyyy
	 * @return - Data
	 */
	public static Date getTime(final String dateAsString) {
		Date date = null;
		try {
			final DateFormat dateFormat = new SimpleDateFormat("HH:mm:ss");
			date = dateFormat.parse(dateAsString);
		} catch (final ParseException e) {
			LOGGER.error("Erro ao converter texto em hora.", e);
		}
		return date;
	}

	/**
	 * Método para formatar data no formato dd/MM/yyyy.
	 * 
	 * @author André Lima
	 * @since 13/12/2012 09:00:26
	 * @param date
	 *            {@link Date}
	 * @return Retorna uma String de data formatada
	 */
	public static String formatDateToString(final Date date) {
		final DateFormat dateFormat = new SimpleDateFormat("dd/MM/yyyy");
		return dateFormat.format(date);
	}

	/**
	 * Método responsável por obter um BigDecimal a partir de um double.
	 * 
	 * @author André Lima
	 * @since 13/12/2012 09:00:26
	 * @param number
	 *            - Double
	 * @return - BigDecimal
	 */
	public static BigDecimal getBigDecimal(final Double number) {
		BigDecimal bigDecimal = null;
		if (number != null) {
			bigDecimal = new BigDecimal(number);
		}
		return bigDecimal;
	}

	/**
	 * Método responsável por obter um BigDecimal a partir de um float.
	 * 
	 * @author André Lima
	 * @since 13/12/2012 09:00:26
	 * @param number
	 *            - Float
	 * @return - BigDecimal
	 */
	public static BigDecimal getBigDecimal(final Float number) {
		BigDecimal bigDecimal = null;
		if (number != null) {
			bigDecimal = new BigDecimal(number);
		}
		return bigDecimal;
	}

	/**
	 * Método responsável por checar se uma Collection está nula ou vazia.
	 * 
	 * @author André Lima
	 * @since 13/12/2012 09:00:26
	 * @param collection
	 *            - Coleção
	 * @return - Verdadeiro/False
	 */
	public static Boolean isCollectionNullOrEmpty(final Collection<?> collection) {
		if (collection != null && !collection.isEmpty()) {
			return Boolean.FALSE;
		}
		return Boolean.TRUE;
	}

	/**
	 * Método para deixar a String sem espaço, em maiscula, sem acentos.
	 * 
	 * @author André Lima
	 * @since 13/12/2012 09:00:26
	 * @param strEntrada
	 *            {@link String}
	 * @return {@link String}
	 */
	public static String normalizaString(final String strEntrada) {
		return removeAcentos(strEntrada).trim().toUpperCase();
	}

	/**
	 * Método que remove todos os caracteres especiais de uma String
	 * 
	 * @author André Lima
	 * @since 13/12/2012 09:00:26
	 * @param strEntrada
	 *            {@link String}
	 * @return Retorna uma string sem nenhum caracter especial.
	 */
	public static String removeAcentos(final String strEntrada) {
		String retorno = StringUtils.EMPTY;

		if (isStringEmpty(strEntrada)) {
			return retorno;
		}

		retorno = Normalizer.normalize(strEntrada, Normalizer.Form.NFD);
		retorno = retorno.replaceAll("[^a-zA-Z-Z1-9' ]", "");

		return retorno;
	}

	/**
	 * Método que verifica se uma String é nula ou vazia
	 * 
	 * @author André Lima
	 * @since 13/12/2012 09:00:26
	 * @param entrada
	 *            {@link String}
	 * @return {@link Boolean}
	 */
	public static Boolean isStringEmpty(final String entrada) {
		Boolean retorno = Boolean.FALSE;
		if (entrada == null || entrada.length() == 0) {
			retorno = Boolean.TRUE;
		}
		return retorno;
	}

	/**
	 * Método para gerar o download de relatório.
	 * 
	 * @author André Lima
	 * @since 13/12/2012 09:00:26
	 * @param reportByte
	 *            {@link byte[]} Byte do relatório.
	 * @param type
	 *            {@link String} Ex: pdf.
	 * @param name
	 *            {@link String} Nome do relatório.
	 * @throws {@link Exception}
	 */
	public static void generateDownloadReport(final byte[] reportByte, final String type, final String name) throws Exception {
		final FacesContext context = FacesContext.getCurrentInstance();
		final HttpServletResponse response = (HttpServletResponse) context.getExternalContext().getResponse();
		response.setContentType("application/" + type);
		response.setHeader("Content-disposition", "attachment;filename=" + name);
		response.getOutputStream().write(reportByte);
		response.getOutputStream().close();
		context.renderResponse();
		context.responseComplete();
	}

}